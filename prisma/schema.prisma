// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId        String        @id @default(uuid())
  email         String        @unique
  number        String        @unique
  profileUrl    String?
  otp           String?
  otpExpiration DateTime?
  createdAt     DateTime      @default(now())
  name          String        @unique
  isAdmin       Boolean       @default(false)
  Meetings      Meetings[]
  Visitor       Visitor[]
  Events        Events[]
  Maintenance   Maintenance[]
  Rating        Rating[]
  Booking       Booking[]
}

model Security {
  securityId String    @id @default(uuid())
  name       String
  number     String    @unique
  password   String
  createdAt  DateTime  @default(now())
  Visitor    Visitor[]
}

model Visitor {
  visitorId  String    @id @default(uuid())
  name       String
  age        Int
  address    String
  purpose    String
  number     Int
  photo      String?
  user       User?     @relation(fields: [userId], references: [userId])
  createdAt  DateTime  @default(now())
  userId     String?
  security   Security? @relation(fields: [securityId], references: [securityId])
  securityId String?
  status     Boolean //in or out
}

model Meetings {
  meetingId String   @id @default(uuid())
  title     String
  agenda    String?
  timing    DateTime
  location  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  admin     User     @relation(fields: [userId], references: [userId])
  userId    String
}

model Events {
  eventId   String   @id @default(uuid())
  title     String
  details   String?
  date      DateTime
  venue     String
  admin     User     @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  userId    String
}

model Maintenance {
  maintenanceId String  @id @default(uuid())
  amount        Int
  paid          Boolean @default(false)
  month         String
  year          String
  user          User    @relation(fields: [userId], references: [userId])
  userId        String
}

model Plumber {
  plumberId    String    @id @default(uuid())
  name         String
  password     String
  generalCost  Float
  serviceHours String
  number       String
  Booking      Booking[]
}

model Rating {
  ratingId  String   @id @default(uuid())
  rating    Int // Rating from 1 to 5
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
  booking   Booking  @relation(fields: [bookingId], references: [bookingId])
  userId    String
  bookingId String
}

model Booking {
  bookingId   String   @id @default(uuid())
  date        DateTime
  description String
  user        User     @relation(fields: [userId], references: [userId])
  plumber     Plumber  @relation(fields: [plumberId], references: [plumberId])
  createdAt   DateTime @default(now())
  userId      String
  plumberId   String
  Rating      Rating[]
}
